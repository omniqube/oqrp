### LIST OF OQRP SCRIPTS AND COMMANDS ###
(This list is not 100% complete. Some features may be hidden or left out due to security reasons.)
Build 220724



		oqrp:




		oqrp\console:

argCheck(arguments, minArgs, maxArgs)
	inputs: ARRAY arguments, INT minArgs, INT maxArgs
	outputs: BOOLEAN
	description: Checks if there is a correct number of arguments in the arguments array.

runCommand(cmd)
	inputs: STRING cmd
	outputs: NULL
	description: Runs a given command through the console interface.

string_split(stri, delim)
	inputs: STRING stri, STRING delim
	outputs: STRING
	description: Splits a given string into an array, using a common delimiter as the splitting point.

show_console_message(text)
	inputs: STRING text
	outputs: NULL
	description: Displays a message into the console.

implodeArgs(delimiter, array)
	inputs: STRING delimiter, ARRAY array
	outputs: ARRAY
	description: Implodes an array of arguments back into a string.



		oqrp\controls:

vibrate(sec, l, r)
	inputs: REAL sec, INT l, INT r
	outputs: NULL
	description: Vibrates the conroller for sec seconds, where l and r are percentages from 0 to 100 of the left and right vibration motors respectively.

input(action_id)
	inputs: STRING action_id
	outputs: BOOLEAN
	description: Detects game input for a given action ID.

input_forcepressed(action_id)
	inputs: STRING action_id
	outputs: BOOLEAN
	description: Detects game input for a given action ID, but forces a check_pressed event.

keydictionary(key)
	inputs: VK key | CHAR key
	outputs: STRING
	description: Returns a human-readable string for a given key.

lockGameInput()
	inputs: NULL
	outputs: NULL
	description: Locks player input into the game.

unlockGameInput()
	inputs: NULL
	outputs: NULL
	description: Unlocks player input into the game.



		oqrp\data:arrays

array(args)
	inputs: ANY args
	outputs: ARRAY
	description: Collapses the elements into an array.

array_add(array, args)
	inputs: ARRAY array, ANY args
	outputs: ARRAY
	description: Adds an element into an array.

array_sort(array, ascend)
	inputs: ARRAY array, BOOLEAN ascend
	outputs: ARRAY
	description: Sorts an array, ascending or descending.

array_explode(delimiter, string)
	inputs: STRING delimiter, STRING string
	outputs: ARRAY
	description: Returns an array of strings parsed from a given string of elements separated by a delimiter.

array_explode_real(delimiter, real)
	inputs: STRING delimiter, REAL real
	outputs: ARRAY
	description: Returns an array of real values parsed from a given string of elements separated by a delimiter.

array_implode(delimiter, arr)
	inputs: STRING delimiter, ARRAY arr
	outputs: ARRAY
	description: Returns a string of elements from a given array of strings and separated by a delimiter.

array_implode_real(delimiter, arr)
	inputs: STRING delimiter, ARRAY arr
	outputs: ARRAY
	description: Returns a string of elements from a given array of real values and separated by a delimiter.



		oqrp\data:grids
See Grids.gml for more information regarding these functions:
ds_grid_delete_column(grid, col) - Deletes from a grid the column at a given column index.
ds_grid_delete_row(grid, row) - Deletes from a grid the row at a given row index.
ds_grid_draw(grid, x, y) - Draws the data of a given grid at a screen location.
ds_grid_duplicate(grid) - Returns a duplicate of the given grid.
ds_grid_filter_gaussian(grid, sigma) - Performs a Gaussian convolution on a given grid.
ds_grid_filter_gaussian_wrap(grid, sigma) - Performs a Gaussian convolution on a given grid, wrapping around the boundaries of the grid if needed.
ds_grid_flood_fill(grid, x, y, val) - Fills a bounded area within a grid with a given value.
ds_grid_get_bicubic(grid, x, y) - Returns the bicubic interpolation of the sixteen grid cells surrounding the given fractional coordinate.
ds_grid_get_bilinear(grid, x, y) - Returns the bilinear interpolation of the four grid cells surrounding a given fractional coordinate.
ds_grid_mirror(grid, horiz, vert) - Rearranges the elements of a given grid by mirroring horizontally and/or vertically.
ds_grid_swap_columns(grid, col1, col2) - Exchanges the contents of two entire grid columns.
ds_grid_swap_rows(grid, row1, row2) - Exchanges the contents of two entire grid rows.
ds_grid_translate(grid, horiz, vert) - Shifts the contents of a grid by a given number of rows and columns.



		oqrp\data:lists
See Lists.gml for more information regarding these functions:
ds_list_add_list(parent, list) - Adds a list to a given list and marks it.
ds_list_add_map(parent, map) - Adds a map to a given list and marks it.
ds_list_cv(list, sample) - Returns the coefficient of variation for values in a list.
ds_list_flip(list) - Rearranges the values of a list in reverse order.
ds_list_geometric_mean(list) - Returns the geometric mean of values in a list.
ds_list_max(list) - Returns the maximum value in a list.
ds_list_mean(list) - Returns the arithmetic mean of values in a list.
ds_list_median(list) - Returns the median of the values in the given list.
ds_list_min(list) - Returns the minimum value in a list.
ds_list_pop_standard_deviation(list) - Returns the population standard deviation for values in a list.
ds_list_range(list) - Returns the range of the values in a list.
ds_list_select_relative(current, delta, list) - Returns a value from a list data structure in a position relative to a given value.
ds_list_select_relative_wrap(current, delta, list) - Returns a value from a list data structure in a position relative to a given value.
ds_list_standard_deviation(list, sample) - Returns the standard deviation for values in a list.
ds_list_standard_score(list, pos) - Returns the standard score (z-score) of the value at a position in a list.
ds_list_sum(list) - Returns the sum of all values in a list.
ds_list_sum_of_squares(list) - Returns the sum of squares of all values in a list.
ds_list_sum_squares(list) - Returns the sum of squares of all values in a given list.
ds_list_variance(list, sample) - Returns the variance of the values in a given list.
ds_list_vmr(list, sample) - Returns the variance-to-mean ratio of values in a list.



		oqrp\data:maps
See Maps.gml for more information regarding these functions:
ds_map_clone(map) Clones a map simply to a new copy and returns the created map.
ds_map_deep_clone(map) Clones a map deeply to a new copy, cloning any nested maps and lists, and returning the created root map.
ds_map_default_value(map,key,val) Returns the value of a key from a given map, inserting a default value into the map if the key does not yet exist.
ds_map_load(file [,delim]) Loads the contents of a file into a new map data structure, returning its id.
ds_map_mirror(id) Exchanges map keys with map values.
ds_map_save(id, file [,delim]) Saves the contents of a given grid data structure into a file.



		oqrp\graphics\sprites:

sprite_desaturate(sprite)
	inputs: SPRITE sprite
	outputs: NULL
	description: Desaturates a sprite.

sprite_invert_color(sprite)
	inputs: SPRITE sprite
	outputs: NULL
	description: Inverts the colors in a sprite.

sprite_replace_color(sprite, oldc, newc)
	inputs: SPRITE sprite, REAL oldc, REAL newc
	outputs: NULL
	description: Replaces a specified color in a sprite with a different one.

sprite_replace_color_blend(sprite,oldcolor,newcolor,htol,stol,vtol,blend)
	inputs: See colorspr.gml for more information.
	outputs: NULL
	description: See colorspr.gml for more information.

See drawspr.gml for more information regarding these functions:
draw_sprite_flip_ext(sprite,subimg,x,y,xscale,yscale,rot,color,alpha,fliph,flipv) - Draws a sprite in the same manner as draw_sprite_ext() and can also flip the sprite horizontally and/or vertically.
draw_sprite_halfpixel(sprite, subimg, x, y, xscale, yscale, rot, color, alpha) - Draws a sprite transformed about the center of its origin pixel instead of the top-left corner.
draw_sprite_hud(sprite,subimg,x,y,xscale,yscale,rot,color,alpha) - Draws a sprite at a position relative to the top-left corner of the screen, regardless of the current view position or rotation.
draw_sprite_inverted(sprite,subimage,x,y) - Draws a sprite with inverted colors.
draw_sprite_inverted_ext(sprite,subimage,x,y,xscale,yscale,rot,color,alpha) - Draws a sprite with inverted colors.
draw_sprite_percent(sprite,percent,x,y,restrict) - Draws a sprite using a percentage to select a subimage to draw, the first subimage at 0% and the last subimage at 100%.
draw_sprite_rectangle(sprite,subimg,x1,y1,x2,y2,left,top,right,bottom) - Draws a rectangle using a sprite sliced into 9 sections.
draw_sprite_shear(sprite,subimg,x,y,xshear,yshear) - Draws a given sprite sheared by a given amount.
draw_sprite_stretched_direction(sprite,subimg,x,y,scale,dir) - Draws a sprite scaled along an arbitrary axis.
draw_sprite_tiled_area(sprite,subimg,x,y,x1,y2,x2,y2) - Draws a repeated sprite image, tiled to fill a given region and with a given offset.
draw_sprite_tiled_area_ext(sprite,subimg,x,y,x1,y2,x2,y2,color,alpha) - Draws a repeated sprite image, tiled to fill a given region and with a given offset.
draw_sprite_wave(sprite,subimg,x,y,axis,wavelength,amplitude,phase) - Draws a sprite with wave-like distortion.
draw_sprite_wave_ext(sprite,subimg,x,y,axis,wavelength,amplitude,phase,xscale,yscale,color,alpha) - Draws a sprite with wave-like distortion.
motion_blur(length,direction) - Draws the assigned sprite of the calling instance, using its subimage, position, scaling, rotation, and blending settings, with a motion blur effect applied to it.
edit.gml>sprite_edit_begin(sprite, a, w, h, n, xoff, yoff, surface, i) - Edit a sprite dynamically using drawing commands.



		oqrp\graphics:
See Color.gml for more information regarding these functions:
color_mix(color1,color2) - Returns a 50/50 mixture of the two given colors.
color_multiply(color1,color2) - Returns the product of the two given colors.
color_scale(color,scale) - Returns a given color with each component scaled by a factor.
color_to_cmyk(color [, channel]) - Returns a list data structure populated by CMYK values of a color, or optionally, the value of a specific color channel.
color_to_hex(color) - Returns a given color as a hexadecimal string in RRGGBB format.
color_to_wavelength(color) - Returns the approximate wavelength of a given color in nanometers.
hex_to_color(hex) - Returns an RGB color from a given hexadecimal color code.
hex_to_rgb(hex) - Returns a list data structure populated by RGB color component values.
make_color_random() - Returns a random color.
merge_color_squared(col1,col2,amount) - Returns a color merged from two colors by a given amount, where color components are squared for a more natural mix.
merge_colors(col1,col2,...,amount) - Returns a color merged from a series of two or more colors by a given amount.
rgb_to_cmyk(r,g,b [,channel]) - Returns a list data structure populated by CMYK values of a color, or optionally, the value of a specific color channel.
rgb_to_hex(r,g,b) - Returns a given color as a hexadecimal string in RRGGBB format.
wavelength_to_hue(nano) - Returns the approximate HSV color hue [0..255] of a given wavelength.

d3d_model_copy(model)
	inputs: MODEL model
	outputs: MODEL
	description: Returns a model index of a copy of a given model.

See Draw.gml for more information regarding these functions:
draw_arc(x1,y1,x2,y2,x3,y3,x4,y4,precision) - Draws an arc of an ellipse mimicking draw_arc() from GM5.
draw_chord(x1,y1,x2,y2,x3,y3,x4,y4,outline,precision) - Draws a chord of an elliptical disk mimicing draw_chord() from GM5.
draw_crosshair(x,y) - Draws a pair of horizontal and vertical lines, spanning the room and intersecting a given point.
draw_crosshair_ext(x,y,col1,col2,col3,col4) - Draws a pair of horizontal and vertical lines, spanning the room and intersecting a given point.
draw_crosshair_width(x,y) - Draws a pair of horizontal and vertical lines of a given width, spanning the room and intersecting a given point.
draw_crosshair_width_ext(x,y,width,col1,col2,col3,col4) - Draws a pair of horizontal and vertical lines, spanning the room and intersecting a given point.
draw_curve(x1,y1,x2,y2,direction,detail) - Draws a curve between two points with a given starting angle.
draw_pie(x1,y1,x2,y2,x3,y3,x4,y4,outline,precision) - Draws a sector of an elliptical disc, mimicking draw_pie() from GM5.
draw_rectangle_dashed(x1, y1, x2, y2, size, center) - Draws a rectangle made of dashes of a given size.
draw_rectangle_dashed_color(x1, y1, x2, y2, col1, col2, col3, col4, size, center) - Draws a rectangle made of dashes of a given size.
draw_rectangle_inverted(x1, y1, x2, y2) - Draws a rectangle which inverts the colors beneath it.
draw_roundrect_ext(x1,y1,x2,y2,outline,radius,precision) - Draws a rectangle with rounded corners.

room_fade(target, time, fadecolor)
	inputs: ROOM target, REAL time, COLOR fadecolor
	outputs: NULL
	description: Fades into a target room through a color.

room_ramp(target, time, fadecolor)
	inputs: ROOM target, REAL time, COLOR fadecolor
	outputs: NULL
	description: Ramps into a target room through a color.

room_slides(target, time, fadecolor)
	inputs: ROOM target, REAL time, COLOR fadecolor
	outputs: NULL
	description: Slides into a target room through a color.

See Shaders.gml for more information regarding these functions:
shader_set_uniform_color(uniform,color,alpha) - Sets a vec4 shader uniform with a color and alpha value.
shader_set_uniform_rgba(uniform,r,g,b,a) - Sets a vec4 shader uniform with red, green, blue, and alpha values.

See Surface.gml for more information regarding these functions:
draw_surface_center(id,x,y) - Draws a surface centered at a given point.
draw_surface_center_ext(id,x,y,xscale,yscale,rot,color,alpha) - Draws a surface centered at a given point with rotation, scaling, and color and alpha blending.
draw_surface_center_rotate(id,x,y,rot) - Draws a surface centered at a given point and rotated.
surface_create_clear(width,height,color,alpha) - Creates a surface of a given size, cleared to a given color and alpha.

See Text.gml for more information regarding these functions:
draw_text_hud(x,y,string,sep,width,xscale,yscale,rot,c1,c2,c3,c4,alpha) - Draws a string of text at a position relative to the top-left corner of the screen, regardless of the current view position or rotation.
draw_text_shadow(x,y,str,color,shadow,intensity,distance,direction) - Draws a given string with a simple shadow effect applied to it.
string_limit_width(string,width,ext) Returns a given string.
string_wordwrap_width(string,width,break,split) - Returns a given string, word wrapped to a pixel width, with line break characters inserted between words.

See tiled_background.gml for more information regarding these functions:
draw_background_tiled_area(background,x,y,x1,y2,x2,y2) - Draws a repeated background image, tiled to fill a given region and with a given offset.
draw_background_tiled_area_ext(background,x,y,x1,y2,x2,y2,color,alpha) - Draws a repeated background image, tiled to fill a given region and with a given offset.



		oqrp\math:
		oqrp\resource maps:
		oqrp\utilities:







